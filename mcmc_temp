import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm # This allows different color schemes
import math

%matplotlib notebook
# Generate an array of increasing values
def mcmc_temp(Comf_temp,day_tol=0,night_tol=0):
    
    a=np.arange(40,25,-1.9)
    a = a.reshape(8,1)
    a =np.concatenate((a,a),axis=1)
    a =np.concatenate((a,a),axis=1)
    a =np.concatenate((a,a),axis=1)

    # Q is the total heat that must be removed. 
    # Comf_temp is the comfort temperature
    # D1 is the disconfort 
    # Ti is the internal temp after cooling
    # n is the thermal efficiency

    day_tol_l = [i for i in range(-day_tol,day_tol+1)]
    night_tol_l = [i for i in range(-night_tol,night_tol+1)]
    D1_list,E_list,Ti_list,y,it_list,y1=[],[],[],[],[],[]
    D1_list_f,E_list_f,Ti_list_f=[],[],[]
    Edict = {}
    n= 0.6
    x1= 3.2
    x2= 4.7
    iteration,i = 0,0
    ECost0,ECost = 0,0

    # Energy Cost, x is the hour
    x = np.arange(24)
    for i in x:
        y.append(np.sin(i / 2)*(i)+25)

    # Divide the energy cost plot into 8 averages
    Ecost_avg=[]
    for i in [3,6,9,12,15,18,21,24]:
        Ecost_avg.append(np.mean(y[i-3:i]))

    #fig = plt.figure(figsize=(10,10))
    #ax1 = plt.subplot2grid(shape=(2,6), loc=(0,0), colspan=3)
    #ax2 = plt.subplot2grid((2,6), (0,4), colspan=3)



    # Plot Temperatures
    #plt.imshow(a,interpolation='gaussian', cmap=cm.plasma)
    #plt.axis('off')
    #plt.colorbar()
    #plt.text(9.5,3,'Temp(ºC)')
    #plt.axvline(x1, color='black',linewidth=5)
    #plt.axvline(x2, color='black',linewidth=5)

    # Plot Energy Cost
    #plt.title('Energy Prices- $ per MWh')
    #plt.xlabel('hour')
    #plt.ylabel('price($)')
    #plt.step(x, y , label='pre (default)')

    j=0
    C = 20
    l = 1
    while 1:
        if j>7:
            j=0
            C_new = 0.0001*np.sum(np.array(Ecost_avg)*np.array(E_list))+np.mean(D1_list)
            p = 1-min(1,math.exp(((l*((C_new)-(C))))))
            s = np.random.binomial(1, p, 1)
            if s[0]:
                C = C_new
                E_list_f.append(E_list)
                D1_list_f.append(D1_list)
                Ti_list_f.append(Ti_list)
                it_list.append(iteration)    
            D1_list,E_list,Ti_list=[],[],[]
        E,Q,D1= 0,0,0 
        d = []
        if j<2 and night_tol:
            Ti = night_tol_l[np.random.randint(2*night_tol+1)]+Comf_temp
            
        elif j<2:
            Ti = np.random.randint(-1,1+1)+Comf_temp
        if j>1 and day_tol:
            Ti = day_tol_l[np.random.randint(2*day_tol+1)]+Comf_temp
        elif j>1:
            Ti = np.random.randint(-1,1+1)+Comf_temp
        
        for i in range(0,a.shape[0]):
            Q= a[i,4]*(x2-x1)
            E = Q/(n*Ti/((a[i,4]-Ti)))+E
            #a[i,4]= Ti
            d.append(Ti-Comf_temp)
        D1= np.abs(np.array(d).mean())
        E_list.append(E)
        D1_list.append(D1)
        Ti_list.append(Ti)


        iteration += 1
        j += 1

        # Calculate for 40/4 = 10 days
        if iteration >15000:
            break

    fig, (ax3, ax4, ax5) = plt.subplots(nrows=1, ncols=3, sharex=False,
                                        figsize=(10, 4))

    # Plot Energy Spent
    y1= list(np.repeat(np.array(E_list_f[-1]),3))
    ax3.set_title('Power consumed per hour- Watts')
    ax3.set_xlabel('hour')
    ax3.set_ylabel('W')
    ax3.step(x, y1 , label='pre (default)')
    ax3.set_xticks(np.arange(0,23,3))
    ax3.set_facecolor('xkcd:grey')

    
    # Plot Thermal Confort
    y1= list(np.repeat(np.array(D1_list_f[-1]),3)+Comf_temp)
    ax4.set_title('Thermal Comfort(ºC)')
    ax4.set_xlabel('hour')
    ax4.set_ylabel('º C')
    ax4.plot(x,y1)
    ax4.axhline(y=Comf_temp, color='green', linestyle='-')
    ax4.text(7,Comf_temp-0.05,'Desired temperature')
    ax4.set_xticks(np.arange(0,23,3))
    ax4.set_facecolor('xkcd:grey')
    if day_tol or night_tol:
        
        ax4.hlines(y=day_tol+Comf_temp,xmin=5,xmax=23, color='red', linestyle='-')
        ax4.hlines(y=Comf_temp-day_tol,xmin=5,xmax=23, color='red', linestyle='-')
        ax4.hlines(y=Comf_temp+night_tol,xmin=0,xmax=5, color='red', linestyle='-')
        ax4.hlines(y=Comf_temp-night_tol,xmin=0,xmax=5, color='red', linestyle='-')
        ax4.text(7,-day_tol+Comf_temp+0.05,'Day tolerance')
        ax4.text(0,night_tol+Comf_temp+0.05,'Night tolerance')

    # Plot Objective Function

    money,TotC,Totc=[],[],0
    for ii in range(0,len(E_list_f)):
        y1= np.repeat(np.array(E_list_f[ii]),3)
        money = np.sum(y1*y)
        Totc = np.mean(np.repeat(np.array(D1_list_f[ii]),5)[:-1])+0.0001*money
        TotC.append(Totc)
    
    ax5.set_title('money spent+thermal discomfort')
    ax5.set_xlabel('iteration')
    ax5.set_facecolor('xkcd:grey')
    ax5.plot(it_list,TotC,marker='o')
    plt.tight_layout()
    
from IPython.display import Image
Image("temp.jpg")
mcmc_temp(25)
